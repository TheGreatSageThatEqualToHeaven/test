--// MemeSense UI with Tabs + External Library Integration //--

local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Clear previous UI if any
if PlayerGui:FindFirstChild("MemeSenseUI") then
    PlayerGui.MemeSenseUI:Destroy()
end

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MemeSenseUI"
screenGui.Parent = PlayerGui

-- Blur Effect
local blur = Instance.new("BlurEffect")
blur.Name = "MemeSenseBlur"
blur.Size = 0
blur.Parent = game.Lighting

-- Main Window
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 700, 0, 500)
mainFrame.Position = UDim2.new(0.5, -350, 0.5, -250)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.BorderSizePixel = 0
mainFrame.ZIndex = 10
mainFrame.Parent = screenGui
mainFrame.Visible = true

-- Glow (simplified)
local function applyGlow(target, color, spread)
    for i = 1, spread do
        local glowFrame = Instance.new("Frame")
        glowFrame.Size = UDim2.new(1, i * 2, 1, i * 2)
        glowFrame.Position = UDim2.new(0, -i, 0, -i)
        glowFrame.BackgroundColor3 = color
        glowFrame.BorderSizePixel = 0
        glowFrame.BackgroundTransparency = 0.9
        glowFrame.ZIndex = target.ZIndex - 1
        glowFrame.Parent = target
    end
end
applyGlow(mainFrame, Color3.fromRGB(0, 255, 255), 6)

-- Rainbow Stroke Creator
local function createRainbowStroke(parent, yPos)
    local strokeFrame = Instance.new("Frame")
    strokeFrame.Size = UDim2.new(1, 0, 0, 2)
    strokeFrame.Position = UDim2.new(0, 0, 0, yPos)
    strokeFrame.BorderSizePixel = 0
    strokeFrame.BackgroundTransparency = 1
    strokeFrame.Parent = parent

    local uiGradient = Instance.new("UIGradient")
    uiGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
    })
    uiGradient.Rotation = 0
    uiGradient.Parent = strokeFrame

    task.spawn(function()
        while task.wait() do
            uiGradient.Rotation = (uiGradient.Rotation + 1) % 360
        end
    end)
end
createRainbowStroke(mainFrame, 0)
createRainbowStroke(mainFrame, 498)

-- Left Panel (Tabs)
local leftPanel = Instance.new("Frame")
leftPanel.Size = UDim2.new(0, 150, 1, 0)
leftPanel.Position = UDim2.new(0, 0, 0, 0)
leftPanel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
leftPanel.BorderSizePixel = 0
leftPanel.ZIndex = mainFrame.ZIndex + 1
leftPanel.Parent = mainFrame

-- Right content area (where tab content goes)
local contentArea = Instance.new("Frame")
contentArea.Size = UDim2.new(1, -150, 1, 0)
contentArea.Position = UDim2.new(0, 150, 0, 0)
contentArea.BackgroundTransparency = 1
contentArea.Parent = mainFrame

-- Dragging functionality (same as before)
local dragging = false
local dragInput = nil
local dragStart = nil
local startPos = nil
local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Blur fade helper
local blurTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local function fadeBlur(toSize)
    local tween = TweenService:Create(blur, blurTweenInfo, {Size = toSize})
    tween:Play()
end

-- Toggle UI & Blur on Ctrl press
local uiOpen = true
fadeBlur(24)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
        uiOpen = not uiOpen
        mainFrame.Visible = uiOpen
        if uiOpen then
            fadeBlur(24)
        else
            fadeBlur(0)
        end
    end
end)

-- Tab Management
local tabs = {}
local selectedTab = nil
local tabButtonHeight = 40
local tabSpacing = 2

local function clearContent()
    for _, child in ipairs(contentArea:GetChildren()) do
        if not child:IsA("UIListLayout") then
            child:Destroy()
        end
    end
end

local function selectTab(tabName)
    if selectedTab then
        -- Reset previous tab button style
        tabs[selectedTab].Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        tabs[selectedTab].Button.TextColor3 = Color3.fromRGB(200, 200, 200)
        tabs[selectedTab].Content.Visible = false
    end
    selectedTab = tabName
    local tab = tabs[tabName]
    tab.Button.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    tab.Button.TextColor3 = Color3.new(1,1,1)
    tab.Content.Visible = true
end

-- Public API: Add Tab
local Library = {}

function Library:AddTab(tabName, tabFunction)
    if tabs[tabName] then
        warn("Tab already exists: "..tabName)
        return
    end

    -- Create tab button
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(1, -10, 0, tabButtonHeight)
    tabButton.Position = UDim2.new(0, 5, 0, (#tabs * (tabButtonHeight + tabSpacing)) + 5)
    tabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    tabButton.BorderSizePixel = 0
    tabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    tabButton.Font = Enum.Font.Gotham
    tabButton.TextSize = 18
    tabButton.Text = tabName
    tabButton.Parent = leftPanel

    -- Create content frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Visible = false
    contentFrame.Parent = contentArea

    -- Call the tab function passing the content frame (so library can add UI inside)
    tabFunction(contentFrame)

    -- Store in tabs table
    tabs[tabName] = {
        Button = tabButton,
        Content = contentFrame
    }

    tabButton.MouseButton1Click:Connect(function()
        selectTab(tabName)
    end)

    -- Auto-select first tab added
    if not selectedTab then
        selectTab(tabName)
    end
end

-- Return Library table so user can call Library:AddTab(...)
return Library
